from handlers.config import bot
from handlers.HandlerMenu.handler_language_select import handle_language_selection
from handlers.HandlerMenu.handler_help import handle_halp
from keyboard.keyboardInlineStartMessage import create_inline_keyboard
from telebot import types
from handlers.config import TOKEN_PAY_MASTER
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
def process_callback(call, message_text, answer_text=None, parse_mode=None):
    if answer_text:
        bot.answer_callback_query(call.id, answer_text)
    bot.send_message(call.message.chat.id, message_text, parse_mode=parse_mode)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if call.data == "buy_extend":
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_keyboard = types.InlineKeyboardMarkup()

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
            one_month_button = types.InlineKeyboardButton("1 –º–µ—Å—è—Ü - 199‚ÇΩ", callback_data="subscribe_1")
            two_months_button = types.InlineKeyboardButton("2 –º–µ—Å—è—Ü–∞ - 399‚ÇΩ", callback_data="subscribe_2")
            three_months_button = types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 569‚ÇΩ (-5%)", callback_data="subscribe_3")
            six_months_button = types.InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 960‚ÇΩ (-20%)", callback_data="subscribe_6")
            twelve_months_button = types.InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 1560‚ÇΩ (-35%)", callback_data="subscribe_12")

            subscription_keyboard.row(one_month_button, two_months_button)
            subscription_keyboard.row(three_months_button, six_months_button)
            subscription_keyboard.row(twelve_months_button)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(
                call.message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=subscription_keyboard
            )

        elif call.data.startswith("subscribe_"):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_period = call.data.split("_")[1]

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            subscription_prices = {
                "1": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", "amount": 199},
                "2": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –º–µ—Å—è—Ü–∞", "amount": 399},
                "3": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ -5% —Å–∫–∏–¥–∫–∞", "amount": 569},
                "6": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ -20% —Å–∫–∏–¥–∫–∞", "amount": 960},
                "12": {"label": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ -35% —Å–∫–∏–¥–∫–∞", "amount": 1560},
            }

            if subscription_period in subscription_prices:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
                price_info = subscription_prices[subscription_period]
                label = price_info["label"]
                amount = price_info["amount"]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
                bot.send_invoice(
                    chat_id=call.message.chat.id,
                    title=label,
                    description=f"–û–ø–ª–∞—Ç–∞ {label}",
                    provider_token=TOKEN_PAY_MASTER,  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                    currency='RUB',
                    prices=[types.LabeledPrice(label=label, amount=amount * 100)],  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                    start_parameter='test-invoice-payload',
                    invoice_payload=f'subscription_{subscription_period}'
                )
            else:
                process_callback(call, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏.", "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")

        elif call.data == "help":
            handle_halp(call)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–∏

        elif call.data == "active_keys":
            process_callback(call, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏'.", "–í—ã–±—Ä–∞–Ω–æ: –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")

        elif call.data == "change_location":
            process_callback(call, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é'.", "–í—ã–±—Ä–∞–Ω–æ: –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")

        elif call.data == "change_protocol":
            process_callback(call, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª'.", "–í—ã–±—Ä–∞–Ω–æ: –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª")

        elif call.data == "donate":
            process_callback(call, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å'.", "–í—ã–±—Ä–∞–Ω–æ: –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å")

        elif call.data == "about_vpn":
            process_callback(call, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–í—Å—ë –æ ZoomVPN'.", "–í—ã–±—Ä–∞–Ω–æ: –í—Å—ë –æ ZoomVPN")

        elif call.data == "invite":
            process_callback(call, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å'.", "–í—ã–±—Ä–∞–Ω–æ: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å")

        elif call.data == "language":
            handle_language_selection(call)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞

        elif call.data == "partnership":
            process_callback(call, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'.", "–í—ã–±—Ä–∞–Ω–æ: –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")

        elif call.data == "main_menu":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–æ —è–∑—ã–∫–æ–≤
            username = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                "üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZoomVPN!:\n"
                "üö´ –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ ‚Äî –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.\n"
                "üåç –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, –≥–¥–µ –±—ã –≤—ã –Ω–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å.\n"
                "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.\n"
                "‚öôÔ∏è –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –ª–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞ 1 –º–∏–Ω—É—Ç—É –Ω–∞ iPhone, Android, –ü–ö –∏ macOS.\n"
                "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§ üá∑üá∫ –∏ –°–ë–ü ‚Äî –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ.\n"
                "üíµ –í—Å–µ–≥–æ 199‚ÇΩ –≤ –º–µ—Å—è—Ü ‚Äî –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–∫–ª–∞–º—ã.\n\n"
                "üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
            )
            keyboard = create_inline_keyboard()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            bot.send_message(
                call.message.chat.id,
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

        elif call.data in ["ru", "en", "de", "fr"]:  # –Ø–∑—ã–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            language_mapping = {
                "ru": "—Ä—É—Å—Å–∫–∏–π",
                "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
                "de": "–Ω–µ–º–µ—Ü–∫–∏–π",
                "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"
            }
            selected_language = language_mapping.get(call.data)
            if selected_language:
                process_callback(
                    call,
                    f"–¢—ã –≤—ã–±—Ä–∞–ª {selected_language} —è–∑—ã–∫! –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!",
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_language} —è–∑—ã–∫",
                    parse_mode='HTML'
                )
            else:
                process_callback(call, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫")

        else:
            process_callback(call, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π.",
                             "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"Error in callback handler: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã)
@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    logging.info(f"Pre-checkout query received: {pre_checkout_query}")
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    logging.info(f"Successful payment received: {message.successful_payment}")
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")